
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  admin: 'admin',
  status: 'status',
  vendor: 'vendor'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  email: 'email',
  name: 'name',
  companyName: 'companyName',
  country: 'country',
  phone: 'phone',
  serviceType: 'serviceType',
  status: 'status',
  website: 'website',
  description: 'description',
  document: 'document',
  password: 'password',
  brandImage: 'brandImage',
  walletAddress: 'walletAddress'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  email: 'email',
  password: 'password',
  name: 'name'
};

exports.Prisma.JetScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  manufacturer: 'manufacturer',
  otherManufacturer: 'otherManufacturer',
  model: 'model',
  year: 'year',
  serialNumber: 'serialNumber',
  totalTimeSinceNew: 'totalTimeSinceNew',
  totalLandings: 'totalLandings',
  engineMakeModel: 'engineMakeModel',
  engineHours: 'engineHours',
  avionicsSuite: 'avionicsSuite',
  interiorConfig: 'interiorConfig',
  interiorImageUrls: 'interiorImageUrls',
  exteriorImageUrls: 'exteriorImageUrls',
  layoutImageUrl: 'layoutImageUrl',
  price: 'price',
  currentLocation: 'currentLocation',
  registrationNumber: 'registrationNumber',
  contactDetails: 'contactDetails',
  description: 'description',
  aircraftType: 'aircraftType',
  seatingCapacity: 'seatingCapacity',
  cabinHeight: 'cabinHeight',
  cabinWidth: 'cabinWidth',
  cabinLength: 'cabinLength',
  baggageCapacity: 'baggageCapacity',
  numberOfEngines: 'numberOfEngines',
  engineType: 'engineType',
  engineThrust: 'engineThrust',
  range: 'range',
  cruiseSpeed: 'cruiseSpeed',
  maxAltitude: 'maxAltitude',
  runwayLength: 'runwayLength',
  emptyWeight: 'emptyWeight',
  maxTakeoffWeight: 'maxTakeoffWeight',
  fuelCapacity: 'fuelCapacity',
  fuelConsumption: 'fuelConsumption',
  serviceCeiling: 'serviceCeiling',
  takeoffDistance: 'takeoffDistance',
  landingDistance: 'landingDistance',
  certification: 'certification',
  noiseCompliance: 'noiseCompliance',
  operationalRestrictions: 'operationalRestrictions',
  lastInspectionDate: 'lastInspectionDate',
  nextInspectionDue: 'nextInspectionDue',
  maintenanceStatus: 'maintenanceStatus',
  maintenanceProgram: 'maintenanceProgram',
  airframeEngineStatus: 'airframeEngineStatus',
  refurbishmentDate: 'refurbishmentDate',
  avionicsUpdates: 'avionicsUpdates',
  warrantyRemaining: 'warrantyRemaining',
  wifiConnectivity: 'wifiConnectivity',
  lavatoryGalleyDetails: 'lavatoryGalleyDetails',
  cabinAmenities: 'cabinAmenities',
  interiorDesigner: 'interiorDesigner',
  exteriorPaintScheme: 'exteriorPaintScheme',
  recentUpgrades: 'recentUpgrades',
  previousOwners: 'previousOwners',
  deliveryAvailability: 'deliveryAvailability',
  paymentTxSignature: 'paymentTxSignature',
  transactionLink: 'transactionLink',
  vendorId: 'vendorId',
  views: 'views',
  status: 'status',
  sponsored: 'sponsored',
  sponsoredType: 'sponsoredType',
  end_date: 'end_date'
};

exports.Prisma.JetForBidsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  manufacturer: 'manufacturer',
  otherManufacturer: 'otherManufacturer',
  model: 'model',
  year: 'year',
  serialNumber: 'serialNumber',
  totalTimeSinceNew: 'totalTimeSinceNew',
  totalLandings: 'totalLandings',
  engineMakeModel: 'engineMakeModel',
  engineHours: 'engineHours',
  avionicsSuite: 'avionicsSuite',
  interiorConfig: 'interiorConfig',
  interiorImageUrls: 'interiorImageUrls',
  exteriorImageUrls: 'exteriorImageUrls',
  price: 'price',
  currentLocation: 'currentLocation',
  registrationNumber: 'registrationNumber',
  contactDetails: 'contactDetails',
  previousOwners: 'previousOwners',
  maintenanceProgram: 'maintenanceProgram',
  airframeEngineStatus: 'airframeEngineStatus',
  refurbishmentDate: 'refurbishmentDate',
  wifiConnectivity: 'wifiConnectivity',
  lavatoryGalleyDetails: 'lavatoryGalleyDetails',
  cabinAmenities: 'cabinAmenities',
  range: 'range',
  cruiseSpeed: 'cruiseSpeed',
  maxAltitude: 'maxAltitude',
  runwayLength: 'runwayLength',
  emptyWeight: 'emptyWeight',
  maxTakeoffWeight: 'maxTakeoffWeight',
  deliveryAvailability: 'deliveryAvailability',
  vendorId: 'vendorId',
  views: 'views',
  status: 'status',
  sponsored: 'sponsored',
  sponsoredType: 'sponsoredType',
  end_date: 'end_date',
  biddingEndDate: 'biddingEndDate',
  minimumBidIncrement: 'minimumBidIncrement',
  biddingStatus: 'biddingStatus',
  currentBid: 'currentBid',
  bidCount: 'bidCount'
};

exports.Prisma.JetForCharterScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  jetName: 'jetName',
  aircraftType: 'aircraftType',
  manufacturer: 'manufacturer',
  yearOfManufacture: 'yearOfManufacture',
  registrationNumber: 'registrationNumber',
  seatingCapacity: 'seatingCapacity',
  cabinConfiguration: 'cabinConfiguration',
  maximumRange: 'maximumRange',
  cruisingSpeed: 'cruisingSpeed',
  baggageCapacity: 'baggageCapacity',
  homeBase: 'homeBase',
  availableRoutes: 'availableRoutes',
  operatingDays: 'operatingDays',
  noticeRequired: 'noticeRequired',
  pricePerHour: 'pricePerHour',
  minimumFlightTime: 'minimumFlightTime',
  tripOption: 'tripOption',
  additionalFees: 'additionalFees',
  discounts: 'discounts',
  cabinFeatures: 'cabinFeatures',
  inFlightMeals: 'inFlightMeals',
  flightAttendant: 'flightAttendant',
  petsAllowed: 'petsAllowed',
  smokingAllowed: 'smokingAllowed',
  exteriorImages: 'exteriorImages',
  interiorImages: 'interiorImages',
  videoLink: 'videoLink',
  luxuryCarService: 'luxuryCarService',
  vendorId: 'vendorId',
  sponsored: 'sponsored',
  sponsoredType: 'sponsoredType',
  end_date: 'end_date',
  transactionSignature: 'transactionSignature',
  transactionLink: 'transactionLink',
  status: 'status',
  views: 'views'
};

exports.Prisma.JetForSaleMessagesScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerCountry: 'customerCountry',
  customerPhone: 'customerPhone',
  listingId: 'listingId',
  vendorId: 'vendorId',
  message: 'message',
  createdAt: 'createdAt',
  read: 'read'
};

exports.Prisma.JetForCharterMessagesScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerCountry: 'customerCountry',
  departureLocation: 'departureLocation',
  arrivalLocation: 'arrivalLocation',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  passengerCount: 'passengerCount',
  specialRequests: 'specialRequests',
  listingId: 'listingId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  read: 'read'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  wallet: 'wallet'
};

exports.Prisma.HelicopterForSaleListingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  helicopterName: 'helicopterName',
  helicopterType: 'helicopterType',
  manufacturer: 'manufacturer',
  yearOfManufacture: 'yearOfManufacture',
  registrationNumber: 'registrationNumber',
  serialNumber: 'serialNumber',
  seatingCapacity: 'seatingCapacity',
  maximumRange: 'maximumRange',
  cruisingSpeed: 'cruisingSpeed',
  baggageCapacity: 'baggageCapacity',
  condition: 'condition',
  totalFlightHours: 'totalFlightHours',
  maintenanceHistory: 'maintenanceHistory',
  lastInspection: 'lastInspection',
  salePrice: 'salePrice',
  discounts: 'discounts',
  avionics: 'avionics',
  emergencyEquipment: 'emergencyEquipment',
  cargoHook: 'cargoHook',
  videoLink: 'videoLink',
  exteriorImageUrls: 'exteriorImageUrls',
  interiorImageUrls: 'interiorImageUrls',
  additionalEquipment: 'additionalEquipment',
  transactionSignature: 'transactionSignature',
  transactionLink: 'transactionLink',
  vendorId: 'vendorId',
  views: 'views',
  status: 'status',
  sponsored: 'sponsored',
  sponsoredType: 'sponsoredType',
  endDate: 'endDate'
};

exports.Prisma.CabinFeatureScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name'
};

exports.Prisma.HelicopterMessageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerCountry: 'customerCountry',
  listingId: 'listingId',
  vendorId: 'vendorId',
  message: 'message',
  read: 'read'
};

exports.Prisma.HelicopterForCharterScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  model: 'model',
  year: 'year',
  capacity: 'capacity',
  range: 'range',
  pricePerHour: 'pricePerHour',
  location: 'location',
  availableFrom: 'availableFrom',
  availableTo: 'availableTo',
  description: 'description',
  registrationNumber: 'registrationNumber',
  engineType: 'engineType',
  engineCount: 'engineCount',
  maxSpeed: 'maxSpeed',
  cruisingSpeed: 'cruisingSpeed',
  fuelCapacity: 'fuelCapacity',
  maxAltitude: 'maxAltitude',
  flightHours: 'flightHours',
  lastOverhaul: 'lastOverhaul',
  airworthinessCertificate: 'airworthinessCertificate',
  lastMaintenanceDate: 'lastMaintenanceDate',
  insuranceStatus: 'insuranceStatus',
  pilotQualifications: 'pilotQualifications',
  safetyFeatures: 'safetyFeatures',
  hasWifi: 'hasWifi',
  hasRefreshments: 'hasRefreshments',
  hasEntertainmentSystem: 'hasEntertainmentSystem',
  hasClimatControl: 'hasClimatControl',
  depositAmount: 'depositAmount',
  minimumHours: 'minimumHours',
  cancellationPolicy: 'cancellationPolicy',
  packageDeals: 'packageDeals',
  imageUrls: 'imageUrls',
  transactionSignature: 'transactionSignature',
  transactionLink: 'transactionLink',
  vendorId: 'vendorId',
  status: 'status',
  views: 'views',
  sponsored: 'sponsored',
  sponsoredType: 'sponsoredType',
  endDate: 'endDate'
};

exports.Prisma.HelicopterForCharterMessagesScalarFieldEnum = {
  id: 'id',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerCountry: 'customerCountry',
  departureLocation: 'departureLocation',
  arrivalLocation: 'arrivalLocation',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  passengerCount: 'passengerCount',
  specialRequests: 'specialRequests',
  listingId: 'listingId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  read: 'read'
};

exports.Prisma.CarScalarFieldEnum = {
  id: 'id',
  brand: 'brand',
  model: 'model',
  year: 'year',
  carType: 'carType',
  color: 'color',
  interiorColor: 'interiorColor',
  seats: 'seats',
  doors: 'doors',
  transmission: 'transmission',
  driveType: 'driveType',
  fuel: 'fuel',
  condition: 'condition',
  price: 'price',
  weeklyDiscount: 'weeklyDiscount',
  monthlyDiscount: 'monthlyDiscount',
  deposit: 'deposit',
  vin: 'vin',
  licensePlate: 'licensePlate',
  deliveryOption: 'deliveryOption',
  insuranceInfo: 'insuranceInfo',
  rentalTerms: 'rentalTerms',
  description: 'description',
  features: 'features',
  isFeatured: 'isFeatured',
  isAvailable: 'isAvailable',
  mileage: 'mileage',
  engineSize: 'engineSize',
  horsepower: 'horsepower',
  acceleration: 'acceleration',
  topSpeed: 'topSpeed',
  images: 'images',
  location: 'location',
  vendorId: 'vendorId',
  status: 'status',
  sponsored: 'sponsored',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CarBookingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  listingId: 'listingId',
  vendorId: 'vendorId',
  read: 'read'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TripOption = exports.$Enums.TripOption = {
  ROUND_TRIP: 'ROUND_TRIP',
  ONE_WAY: 'ONE_WAY',
  BOTH: 'BOTH'
};

exports.CarType = exports.$Enums.CarType = {
  SEDAN: 'SEDAN',
  SUV: 'SUV',
  COUPE: 'COUPE',
  CONVERTIBLE: 'CONVERTIBLE',
  SPORTS_CAR: 'SPORTS_CAR',
  SUPERCAR: 'SUPERCAR',
  HYPERCAR: 'HYPERCAR',
  WAGON: 'WAGON',
  LIMOUSINE: 'LIMOUSINE'
};

exports.Transmission = exports.$Enums.Transmission = {
  AUTOMATIC: 'AUTOMATIC',
  MANUAL: 'MANUAL',
  SEMI_AUTOMATIC: 'SEMI_AUTOMATIC',
  CVT: 'CVT'
};

exports.DriveType = exports.$Enums.DriveType = {
  REAR_WHEEL_DRIVE: 'REAR_WHEEL_DRIVE',
  FRONT_WHEEL_DRIVE: 'FRONT_WHEEL_DRIVE',
  ALL_WHEEL_DRIVE: 'ALL_WHEEL_DRIVE',
  FOUR_WHEEL_DRIVE: 'FOUR_WHEEL_DRIVE'
};

exports.FuelType = exports.$Enums.FuelType = {
  PETROL: 'PETROL',
  DIESEL: 'DIESEL',
  ELECTRIC: 'ELECTRIC',
  HYBRID: 'HYBRID',
  PLUG_IN_HYBRID: 'PLUG_IN_HYBRID',
  HYDROGEN: 'HYDROGEN'
};

exports.ConditionLevel = exports.$Enums.ConditionLevel = {
  BRAND_NEW: 'BRAND_NEW',
  LIKE_NEW: 'LIKE_NEW',
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  FAIR: 'FAIR'
};

exports.DeliveryOption = exports.$Enums.DeliveryOption = {
  NONE: 'NONE',
  LOCAL: 'LOCAL',
  AIRPORT: 'AIRPORT',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Vendor: 'Vendor',
  Admin: 'Admin',
  Jet: 'Jet',
  JetForBids: 'JetForBids',
  JetForCharter: 'JetForCharter',
  JetForSaleMessages: 'JetForSaleMessages',
  JetForCharterMessages: 'JetForCharterMessages',
  Wallet: 'Wallet',
  HelicopterForSaleListing: 'HelicopterForSaleListing',
  CabinFeature: 'CabinFeature',
  HelicopterMessage: 'HelicopterMessage',
  HelicopterForCharter: 'HelicopterForCharter',
  HelicopterForCharterMessages: 'HelicopterForCharterMessages',
  Car: 'Car',
  CarBookings: 'CarBookings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
